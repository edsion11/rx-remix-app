{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/@remix-run/dev/compiler/shims/react.ts", "../../app/entry.server.tsx", "route-module:/home/edsion/project/rx-remix-app/app/root.tsx", "route-module:/home/edsion/project/rx-remix-app/app/routes/index.tsx"],
  "sourcesContent": ["\nimport * as entryServer from \"/home/edsion/project/rx-remix-app/app/entry.server.tsx\";\nimport * as route0 from \"/home/edsion/project/rx-remix-app/app/root.tsx\";\nimport * as route1 from \"/home/edsion/project/rx-remix-app/app/routes/index.tsx\";\nexport { default as assets } from \"./assets.json\";\nexport const entry = { module: entryServer };\nexport const routes = {\n  \"root\": {\n    id: \"root\",\n    parentId: undefined,\n    path: \"\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route0\n  },\n  \"routes/index\": {\n    id: \"routes/index\",\n    parentId: \"root\",\n    path: undefined,\n    index: true,\n    caseSensitive: undefined,\n    module: route1\n  }\n};", "import * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"remix\";\nimport type { EntryContext } from \"remix\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch\n} from \"remix\";\nimport type { LinksFunction } from \"remix\";\nimport globalStylesUrl from \"~/styles/global.css\";\nexport let links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: globalStylesUrl },\n    // {\n    //   rel: \"stylesheet\",\n    //   href: darkStylesUrl,\n    //   media: \"(prefers-color-scheme: dark)\"\n    // }\n  ];\n};\nexport default function App() {\n  return (\n    <Document>\n      <Layout>\n        <Outlet />\n      </Layout>\n    </Document>\n  );\n}\n\n// https://remix.run/docs/en/v1/api/conventions#errorboundary\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n  return (\n    <Document title=\"Error!\">\n      <Layout>\n        <div>\n          <h1>There was an error</h1>\n          <p>{error.message}</p>\n          <hr />\n          <p>\n            Hey, developer, you should replace this with what you want your\n            users to see.\n          </p>\n        </div>\n      </Layout>\n    </Document>\n  );\n}\n\n// https://remix.run/docs/en/v1/api/conventions#catchboundary\nexport function CatchBoundary() {\n  let caught = useCatch();\n\n  let message;\n  switch (caught.status) {\n    case 401:\n      message = (\n        <p>\n          Oops! Looks like you tried to visit a page that you do not have access\n          to.\n        </p>\n      );\n      break;\n    case 404:\n      message = (\n        <p>Oops! Looks like you tried to visit a page that does not exist.</p>\n      );\n      break;\n\n    default:\n      throw new Error(caught.data || caught.statusText);\n  }\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <Layout>\n        <h1>\n          {caught.status}: {caught.statusText}\n        </h1>\n        {message}\n      </Layout>\n    </Document>\n  );\n}\n\nfunction Document({\n  children,\n  title\n}: {\n  children: React.ReactNode;\n  title?: string;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      {children}\n    </div>\n  );\n}", "import { useContext } from \"react\";\nimport type { MetaFunction, LoaderFunction } from \"remix\";\nimport { useLoaderData, json, Link } from \"remix\";\nimport { Card } from \"~/components/card\";\nimport { SettingCard } from \"~/components/settingCard\";\nimport { map } from \"rxjs\";\nimport { SettingService, StoreContext } from \"../store/store\";\n\nexport let loader: LoaderFunction = () => {\n  return json({ name: \"edsion\" });\n};\n\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"Remix Starter\",\n    description: \"Welcome to remix!\",\n  };\n};\n\nfunction Setting() {\n  const {\n    selectedStore,\n    versionList,\n    specList,\n    selectedDispatch,\n  } = useContext(StoreContext);\n  const { version, color, wheel, interior, optional } = selectedStore.current;\n  return (\n    <div className=\"setting\">\n      <SettingCard\n        title=\"version\"\n        data={versionList}\n        selectedId={version}\n        onSelected={(value) => {\n          selectedDispatch({\n            type: 'version',\n            data: value\n          })\n          //select$.next(value)\n          selectedStore.current.version = value;\n        }}\n      />\n      <SettingCard\n        title=\"color\"\n        data={specList?.filter((item) => item.type === 1)}\n        selectedId={color}\n        onSelected={(value) => {\n          selectedDispatch({\n            type: 'color',\n            data: value\n          })\n          selectedStore.current.color = value;\n        }}\n      />\n      <SettingCard\n        title=\"wheel\"\n        data={specList?.filter((item) => item.type === 2)}\n        selectedId={wheel}\n        onSelected={(value) => {\n          selectedDispatch({\n            type: 'wheel',\n            data: value\n          })\n          selectedStore.current.wheel = value;\n        }}\n      />\n      <SettingCard\n        title=\"interior\"\n        data={specList?.filter((item) => item.type === 3)}\n        selectedId={interior}\n        onSelected={(value) => {\n          selectedDispatch({\n            type: 'interior',\n            data: value\n          })\n          selectedStore.current.interior = value;\n        }}\n      />\n      <SettingCard\n        title=\"optional\"\n        data={specList?.filter((item) => item.type === 4)}\n        selectedId={optional}\n        onSelected={(value) => {\n          const index = selectedStore.current.optional.lastIndexOf(value);\n          if (index > -1) {\n            selectedStore.current.optional.splice(index, 1);\n          } else {\n            selectedStore.current.optional.push(value);\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default function Index() {\n  // return (\n  //   <StoreContext.Provider value={SettingService()}>\n  //     <Setting/>\n  //   </StoreContext.Provider>\n  // );\n  return (\n    <p>hello</p>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,YAAuB;;;ACAvB;AAAA;AAAA;AAAA;AAAA,oBAA+B;AAC/B,mBAA4B;AAGb,uBACb,SACA,oBACA,iBACA,cACA;AACA,MAAI,SAAS,kCACX,oCAAC,0BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAGnD,kBAAgB,IAAI,gBAAgB;AAEpC,SAAO,IAAI,SAAS,oBAAoB,QAAQ;AAAA,IAC9C,QAAQ;AAAA,IACR,SAAS;AAAA;AAAA;;;AClBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQO;;;;;;AAGA,IAAI,QAAuB,MAAM;AACtC,SAAO;AAAA,IACL,EAAE,KAAK,cAAc,MAAM;AAAA;AAAA;AAQhB,eAAe;AAC5B,SACE,oCAAC,UAAD,MACE,oCAAC,QAAD,MACE,oCAAC,sBAAD;AAAA;AAOD,uBAAuB,EAAE,SAA2B;AACzD,UAAQ,MAAM;AACd,SACE,oCAAC,UAAD;AAAA,IAAU,OAAM;AAAA,KACd,oCAAC,QAAD,MACE,oCAAC,OAAD,MACE,oCAAC,MAAD,MAAI,uBACJ,oCAAC,KAAD,MAAI,MAAM,UACV,oCAAC,MAAD,OACA,oCAAC,KAAD,MAAG;AAAA;AAWN,yBAAyB;AAC9B,MAAI,SAAS;AAEb,MAAI;AACJ,UAAQ,OAAO;AAAA,SACR;AACH,gBACE,oCAAC,KAAD,MAAG;AAKL;AAAA,SACG;AACH,gBACE,oCAAC,KAAD,MAAG;AAEL;AAAA;AAGA,YAAM,IAAI,MAAM,OAAO,QAAQ,OAAO;AAAA;AAG1C,SACE,oCAAC,UAAD;AAAA,IAAU,OAAO,GAAG,OAAO,UAAU,OAAO;AAAA,KAC1C,oCAAC,QAAD,MACE,oCAAC,MAAD,MACG,OAAO,QAAO,MAAG,OAAO,aAE1B;AAAA;AAMT,kBAAkB;AAAA,EAChB;AAAA,EACA;AAAA,GAIC;AACD,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,QAAD;AAAA,IAAM,SAAQ;AAAA,MACd,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,IAAW,SAAQ;AAAA,MAC7B,QAAQ,oCAAC,SAAD,MAAQ,SAAiB,MAClC,oCAAC,oBAAD,OACA,oCAAC,qBAAD,QAEF,oCAAC,QAAD,MACG,UACD,oCAAC,iCAAD,OACA,oCAAC,uBAAD,OACC,QAAQ,IAAI,aAAa,iBAAiB,oCAAC,0BAAD;AAAA;AAMnD,gBAAgB,EAAE,YAA2C;AAC3D,SACE,oCAAC,OAAD,MACG;AAAA;;;ACpHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA2B;AAE3B,oBAA0C;AAMnC,IAAI,SAAyB,MAAM;AACxC,SAAO,wBAAK,EAAE,MAAM;AAAA;AAGf,IAAI,OAAqB,MAAM;AACpC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,aAAa;AAAA;AAAA;AAgFF,iBAAiB;AAM9B,SACE,oCAAC,KAAD,MAAG;AAAA;;;AJlGP,oBAAkC;AAC3B,IAAM,QAAQ,EAAE,QAAQ;AACxB,IAAM,SAAS;AAAA,EACpB,QAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEV,gBAAgB;AAAA,IACd,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA;",
  "names": []
}
